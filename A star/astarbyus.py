import numpy as np
import matplotlib.pyplot as plt
#from queue import PriorityQueue
from binaryheapbyus import BinaryHeap
import random

def manhattan_distance(a, b): #distance from a to b
    distance = abs(a[0]-b[0]) + abs(a[1] - b[1])
    return distance

def reconstruct_path(came_from, start, goal):
    path = [goal] #put the goal in the path list
    current = goal
    
    while current != start:
        current = came_from[current] #new current is old current's parent
        path.append(current) #add new current to the path list
    
    path.reverse() #reverse the path from agent to target

    return path

def get_neighbors(pos, grid_size):
    r = pos[0]
    c = pos[1]

    neighbors = []
    directions = [(-1, 0), (1, 0), (0, -1), (0, 1)] #set of directions

    for x, y in directions:
        new_row = r + x #move to new row
        new_col = c + y #move to new col

        if 0 <= new_row < grid_size and 0 <= new_col < grid_size: #check for boundaries
            neighbors.append((new_row, new_col))
    
    return neighbors

def visualize_maze_debug(grid, path, expanded):
    size = len(grid)
    maze = np.zeros((size, size)) #make empty grid

    for i in range(size):
        for j in range(size):
            if grid[i][j] == '#':
                maze[i][j] = 1  # Blocked
            elif grid[i][j] == 'A':
                maze[i][j] = 2  # Agent
            elif grid[i][j] == 'T':
                maze[i][j] = 3  # Target
            else:
                maze[i][j] = 0  # Unblocked

    plt.figure(figsize=(8, 8))
    cmap = plt.cm.get_cmap('viridis', 4)
    plt.imshow(maze, cmap=cmap, origin='upper')

    expanded_rows, expanded_cols = zip(*expanded)
    plt.scatter(expanded_cols, expanded_rows, color='orange', s=10, label='Expanded Nodes')

    path_rows, path_cols = zip(*path)
    plt.plot(path_cols, path_rows, color='red', linewidth=2, label='Path')

    plt.legend()
    plt.xticks([])
    plt.yticks([])
    plt.show()
                

def repeated_forward_a_star(grid, start, goal, tie_break):
    grid_size = len(grid)
    open_list = BinaryHeap()
    
    g_score = {start : 0} #distance to start from start, 0
    f_score = {start : manhattan_distance(start, goal)} #distance from start to goal
    came_from = {} #empty list to store where each block to block came from

    if tie_break == 'LARGER_G': #push to open list depening on their g and f scores and tie breaker
        open_list.push((f_score[start], -g_score[start], random.random(), start))
    else:
        open_list.push((f_score[start], g_score[start], random.random(), start))

    expanded_nodes = [] #list of all proccesed nodes

    while not open_list.is_empty():
        pop_values = open_list.pop()
        current = pop_values[3]
        expanded_nodes.append(current)

        if current == goal: #goal found
            path = reconstruct_path(came_from, start, goal)
            return path, expanded_nodes
    
        for neighbor in get_neighbors(current, grid_size):
            r = neighbor[0]
            c = neighbor[1]

            if grid[r][c] == '#': #path is blocked
                continue

            new_g_score = g_score[current] + 1

            if (neighbor not in g_score) or (new_g_score < g_score[neighbor]): #check to see if new path is better than old path
                came_from[neighbor] = current
                g_score[neighbor] = new_g_score
                f_score[neighbor] = new_g_score + manhattan_distance(neighbor, goal)

                if tie_break == 'LARGER_G': #push to open list depening on their g and f scores and tie breaker
                    open_list.push((f_score[neighbor], -g_score[neighbor], random.random(), neighbor))
                else:
                    open_list.push((f_score[neighbor], g_score[neighbor], random.random(), neighbor))

    return None, expanded_nodes #no path found


def repeated_backward_a_star(grid, start, goal, tie_break):
    grid_size = len(grid)
    open_list = BinaryHeap()
    
    g_score = {goal : 0} #distance to start from start, 0
    f_score = {goal : manhattan_distance(start, goal)} #distance from goal to start
    came_from = {} #empty list to store where each block to block came from

    if tie_break == 'LARGER_G': #push to open list depening on their g and f scores and tie breaker
        open_list.push((f_score[goal], -g_score[goal], random.random(), goal))
    else:
        open_list.push((f_score[goal], g_score[goal], random.random(), goal))

    expanded_nodes = [] #list of all proccesed nodes

    while not open_list.is_empty():
        pop_values = open_list.pop()
        current = pop_values[3]
        expanded_nodes.append(current)

        if current == goal: #goal found
            path = reconstruct_path(came_from, goal, start)
            return path, expanded_nodes
    
        for neighbor in get_neighbors(current, grid_size):
            r = neighbor[0]
            c = neighbor[1]

            if grid[r][c] == '#': #path is blocked
                continue

            new_g_score = g_score[current] + 1

            if (neighbor not in g_score) or (new_g_score < g_score[neighbor]): #check to see if new path is better than old path
                came_from[neighbor] = current
                g_score[neighbor] = new_g_score
                f_score[neighbor] = new_g_score + manhattan_distance(neighbor, start)

                if tie_break == 'LARGER_G': #push to open list depening on their g and f scores and tie breaker
                    open_list.push((f_score[neighbor], -g_score[neighbor], random.random(), neighbor))
                else:
                    open_list.push((f_score[neighbor], g_score[neighbor], random.random(), neighbor))

    return None, expanded_nodes #no path found

def compute_adaptive_path(grid, start, goal, h_values, tie_break):
    grid_size = len(grid)
    open_list = BinaryHeap()

    g_score = {start: 0, goal: float('inf')} 
    came_from = {} #empty list to store where each block to block came from

    f_start = g_score[start] + h_values[start]

    if tie_break == 'LARGER_G':
        open_list.push((f_start, -g_score[start], random.random(), start))
    else:
        open_list.push((f_start, g_score[start], random.random(), start))

    expanded = []

    grid_size = len(grid)

    while not open_list.is_empty():
        pop_values = open_list.pop()
        current = pop_values[3]

        if current in expanded:
            continue

        expanded.append(current)

        if current == start: #goal found
            path = reconstruct_path(came_from, start, goal)
            return path, came_from, expanded
        
        current_g = g_score[current]

        for neighbor in get_neighbors(current, grid_size):

            r = neighbor[0]
            c = neighbor[1]

            if grid[r][c] == '#': #path is blocked
                continue

            new_g_score = current_g + 1

            if neighbor not in g_score or new_g_score < g_score[neighbor]:
                g_score[neighbor] = new_g_score
                came_from[neighbor] = current

                f_neighbor = g_score[neighbor] + h_values[neighbor]

                if tie_break == 'LARGER_G':
                    open_list.push((f_neighbor, -g_score[neighbor], random.random(), neighbor))
                else:
                    open_list.push((f_neighbor, g_score[neighbor], random.random(), neighbor))

    return None, g_score, came_from, expanded

    

def adaptive_a_star(grid, start, goal, tie_break):
    grid_size = len(grid)
    h_values = {}

    for row in range(grid_size):
        for col in range(grid_size):
            h_values[(row, col)] = manhattan_distance((row, col), goal)

    current = start
    total_expanded = []
    full_path = [current]

    while True:
        adaptive_out = compute_adaptive_path(grid, current, goal, h_values, tie_break)
        path = adaptive_out[0]
        g_score = adaptive_out[1]
        came_from = adaptive_out[2]
        expanded = adaptive_out[3]

        total_expanded.extend(expanded)

        if path is None:
            return None, total_expanded
        
        if goal in g_score:
            g_goal = g_score[goal]

            for s in g_score:
                if s != goal and (s in came_from or s == current):
                    old_h = h_values[s]
                    new_h = g_goal - g_score[s]

                    if new_h > old_h :
                        h_values[s] = new_h

        blocked = False

        for i in range(len(path)):
            next_cell = path[i]

            if grid[next_cell[0]][next_cell[1]] == '#':
                blocked = True
                current = path[i-1]
                break
            else:
                current = next_cell
                full_path.append(current)

            if current == goal:
                return full_path, total_expanded
        
        if not blocked and current == goal:
            return full_path, total_expanded

def test_repeated_forward_astar():
    rawtgrid = """
    #__##_###_#_#_#____#_____#____#_________#_###__#___##_#______#_#_#_____##____#______#_#_#______#_#__#
    _#__#____#_______##_______#_______##_________#______#__#____#____#________#____#_#_#___##__##__#___#_
    __#_#___#_#_______##_____#___#____##____________#___#_____#___#_#______#______#_____###__#_##_#_____#
    _#_##__#_#___#___#__##_##_#____________#_##_##__#__#_###_#_#____#_#__#____#__#___#__#_###_#______#__#
    ___##_#__####__#______#__##___#_#_____#_##__#__##_#_#___#_#__#______##_________#__#_________####_##__
    ##__#_________#_______#___#____#__#_##__#_#__###____#___##_##______###_###_#___#___#_#___#___#__#_##_
    ____#___#__#_______#______#_##___#__##___#_##___##______#__#_________#____________#__#_#___#_______#_
    ___##___##_#_#____#_##_#__#__#___##__##__#_#___#___#__##__________#_#_#__#______##___#_________#_____
    _##________###_____#_____#___#_#__#__##__#___#_#______#___##____#______#_#____________#___##____#_#__
    __#___#____###_#_#_____##_#_##___##__#________##_##__##_________#___#_#_##_#_#___##_#____#___#___##_#
    #_________#__#_____##____#________##___#__#_#_##__#___#______#_________#______#_#_####______#________
    #_#____#__________#_________###___##_#____##_______#____#__#__##___#_##__##____#_#_#___##___#______#_
    _#__#____________#___#____#__________#________#####_______###__#_#_#______#_##__#_#_#_____#_#_____#_#
    _____#__#___#_#____###_#__#__##__##_____#______#_____________#_____##____#___#__###_______________#__
    _____#____#_____#__#___#_##________#__#_______#____#______#_#_________#__####_#______#__##__#___#___#
    #_#__#_####_#___#__#___#__##__#_#___#___#_##_#_________#_###________#__#__##__#__#__#_#_#_____#_____#
    _#_#_##____#____#_##_____#__________#_____#####__##___#_____#__##___##_####__#__#__#__#_______#_____#
    __#__#_____#__#__#_____#__#_####_##__##___________#__#____##_#__##_##______#_#_#____#__#_#_________#_
    _##__#_#_#____#__##_##___________#_##_#_#______##______#__#_#__#_#________###________________________
    #_#__#___##_#_#___#__#______###__#_#__#___###_##___#_______#___#_#___#_#_#__#____#__##__##__##___#_##
    ______##__##_###______##___#_##_#_#__##______#_#______##____#__#__#_#____#____##__#_#_###_____#__#_##
    _____#_____##__________##_#_##____#___##______#___#__#_#______###_#___________#________#_#__##__#____
    ##_##___#__#_#__#_###___##____##__#__#_#________#____#______##________#______#__#___#_#_#__#__#____#_
    _________#__________#___#_#__#_#__##____#______#____#_______#______##_____#__##___#___###__#_________
    ____#___##_##__#_____##__##____###___#__##_#_##_#____##__#__#__#_##___#_##_____#___________#__##__#__
    #_###______##__#_###___##_###__#__#___##__#_#___#__##__#__#__#_____#___#_____#__###_____#_________#__
    _#___#____#___#_#_____#_#__#_###_#___#_##_#____#__#__#_#_____#_#____##__________#_##_____#__##___#_#_
    _____#_______#__#___#_##____##_____#_________##___________#___#__##_#_#___###____#_##_#_#_#_###______
    __###_____#_#__#__#_______#____#__#__####___#_#_##__#_____#__#__#__#___#_____#_____##____##____#_____
    _#__#_#__#_#_______#_#_##_##______#_#_#___#__##_#_######__#___#_______#_#________#_________#_#_#_____
    #______#____#________________#__________#_____#________#___#___#_______##__#___##______#_______#__#__
    _#_###___#_##_________###__________#__#___#__#____###__#_#_#__#___#___#_____#__#__#_##_#_#_________#_
    _______#____#_____##___###_###____#_______#__#__#__#_______#__#_#_____#___#___________#__#__#___#____
    ______##______#_______##____#__##_#____#_##____#_##___#___##_#___#__##_________#____#___##_#_##____#_
    ______#______#__#_#__##_#___##_#_#________#__#_#_#_##_#__#____#___#_##________#__#_##_#_#____#_______
    _____##_________#_###___#_#___#__#_______####__#_______##__________________#_##____#__##_______#_###_
    ###__#_#____#__##_##_##_##_#_#_#_#_________###_______#_#___#_##___###____#_#__#_##_____#_____##_#__##
    ____####____#_______#__###___##__#___##____#_#____#___#_###_##_#____##____##_#_____#____#________#_#_
    #__#__#____#_#_#_#____#_____#______#__#_______####______#__##____#_____##______#_###__##__##_________
    _#_________#_____#_#_##__________#__#__#__#_______#___#___#____#__#_#_____#___###______#__#__#____#__
    #_#####____#____###_#_#_#_##___#_##___#___#_#______#______##__#_#___##____##_#_____#__#__##___##__#__
    ___#____#_____##__#___#___#________#___#_#_____#_##_#_##___#_#_#_#_#_#__________#_##_#__#_#_#_##_____
    #_#_###_____________##_#___##_____##___#____#_##_________________#____________#__________##_#________
    ____#_##_##______###_______#_#_#_#___####_______#___##___#_______##________##_##_#_#______#________##
    __#_#_____________#_#___#_____#_______#__#______#___#__###__#___A___#_#__#___#__#_###_##__#_#___###__
    _##_##______#_#____#__##_##___#_###__#______#___#_#_____#_#_______#__#__####_#__#____#_#______#__#___
    _#__#__##_____#__#__###____##____#_#__#_##____#_____#________#_#_#_#________#___#_##_____##_#______#_
    #______####__#_#____#_#______#____#__________#_#___#_#__#_____#_##_#___##_____#___##___#_____________
    _####____#__#________##_##____#_#_##__#__#__#_____#______#______#_#____#__#__##______#_________#_____
    #_#___#__##_#___#_____##__##___#_##__#_#__#__#_#__#____#______##___####_##_#___###_______##____#___#_
    #_#___#_#_#_#____#_#_#_##________#_______________##_#___#_____##___#_##__##_#___#____#___#__#____#___
    #____#_#_#_#_#_#_____##__________#_#________________###_____________#______###_###___##__##______#_##
    __#__#________#_______#_##__#____##_#_#__###__#____##__________#__________##_#____##_______##______#_
    _#__#_____#______#________#_#_#______#___##__________###____#_#_##___#__#___#_______##_______________
    #__#_#__#__#####___#_#___##_#__#_#__#___##__##_#_##_#_####__##__##____#_#__#_#_____#___##___________#
    #_#___#___#__#_#___#_#___#_##___#__#_____##___#_##_#_##____#__#_#____#__#____#_#__###__#_#______#___#
    #__#______#____#____#____##____#_______##_________#_____##____________#___####__##___#________#_#_#__
    #___#__#__###__##_#__##______#____##____##_____#________#____###____#_#__________#_________##______##
    ##_#_______#_##___#____#___######____#________####____#____###__#_#__#____##_#__#_____##______#_#____
    _##_###_#___##_#_#____#____#__#____#__#_#_____#__#____________#____##______###__##____#_______#_#___#
    #_______#_____#_#___#_##____##__#_#___##_#___##_#_________##__#_##__#__###___#______##_####___#_#____
    _____#_____#__#_____#_#________#__#____##_#___#______#___##__#____#__#__#___#____#_##___#####_____##_
    _##_______##_#______________#_#__#_###__#__##__#________##__#_____________#_______#_#________#_#___#_
    ______#____###__#_____#____##_##_#__#_____#____#____#_#___#____#__#__________#_#__##___#________##__#
    ______________##____#__#_#__##_____________________#___##_____#____#_#_______#_#_#______#____#____#__
    _#_#_____#____#__#_____##_##_____#___##___###_##____#_#__#____####_#________#_#_#___##___#_#____#____
    _#_____#####_#____####__#______#_##____#__##_______#_#__#_##__##______#_#__#___##______#_##_##___#___
    ______#_#___#_#_#_#_#__#____#____#_#_#_________#_#___##_____#______#____###__#_________##__##_____##_
    ______#__##______#_#_#__#______##_#_#_##__##__##__#_______#_____________________##__#_#__#__#____#__#
    _____##___#_#______#____#__##_#____#_#_____#_##_#_#____#_#____###__#________#_###__#_#__###_#__#_##__
    #_____##_#__###___#_________#__#______#____#__#____##______#___###____#__#____####_#___##_##___#_____
    ____#_#_#___#_#_#___#_##_##_#___####_#_#_______#_#__________#____#_#_#___#___________#_____###______#
    _#___##_#__#__#_#_______#_#___#____##_#__#____##___####____________##_#_#____#__#___#__#___#__#____#_
    #_#___#_##_#____##___###____###______#___##____#_#__#____#_______##_##___#_____#_##_____##__#____##__
    ______#_#_#_#____#_#____#_##____#_________#_#__##__#_#####____##_______###__#_#____##____#_#__##____#
    _____#__#___###_#________T#___#___________##_#__________#__##___###__#_#__###_#___#__#_#___#__#__#___
    __________________#___#__#_____#_##__#____#______##_______#____#_#___#__________#__##________###___#_
    ______##__#____#_#____##___#____##_#______#_#_##_#____##_#__###_#___#__#____#___#__#___#_#__##_______
    #_##_#____________#__#_______#_____#_#_##__#__#_###___##__#_##_#__##___###__#____##______#___##_##___
    _______#______#_#_#______#_##_##________#__#___##__________#___#_#_###_#__#__#_#____#___#__##__#_____
    _##_#________#_______#_#___##___#_____#__##_#_#______#___##__#_#_____________#__#_____#__##___#__#___
    ##__#_____###__#_##___________##__#__#_____#_______________#__##___#_____###_#___##_#_##__#____###_#_
    _____#___##____##_____###____#_#__#___#__________##__##___#___#_##_#__#_______#_#________#___#_______
    _#___##___#_____________#_#__#______#______#_#_______________##___#____#___#_#______#_##___#____#_#_#
    __####_#_#___######_#_#_____#_#_#_#___#_#__###__#_##______#____###_#______#_#___#__#__##_#__##___#_#_
    __##__##_____#____#___###______#_#_##_#__##____#________#_____#___#____###______#_#______#___##_#_#_#
    _#_________#________#_____#___#__#_#__##__#_####___#_##_#_#_##_#_#___#______#____##____###_#_____#___
    _##___#___#_#_#_#_##___#_#__________###_#_##_________#_#__#__#_#______##___##_____#______#__#______##
    _#_______#_##_##_____#___##____##___#_##___#__#_######_________#__#__#_#_#_________________#_#_____#_
    #_________#__#_#_##___#__###_____#______#_________##_______#___#____##_#____#________#___#__##_#_#___
    #_#____#____#___##____##_#_#_#####______##_#_#____#_#____#_#__#___#___##__###___##___#__##___________
    ##______#_____#_#_#___#_____###__#_________#_##_#_____##________#_#_##___#__#___#___#______#____#_#__
    ______#_#___#_____#_____#_#___#____#___###_#___#_#_____#__#___###________#__###____#__#_#_____##_____
    _#_##___#__##_#_#____#_#__#______#_#_________#__#___##__#__#___#__##__#____#_______#____#_##_#__#____
    ______________##______#_______####_#__####_#_####___##_##_#_#______#___##__#__#___________#_#____###_
    ###_____#______#_#_____#__###__#_####_#______#__##_____#_#___________##__________#_____##____________
    ____#___##_#____#__#_______#____##______#____#_####_____#___#____#__________#_#____#__#______#__##___
    _#___#___#__#____#_#_#___#__##_______________##___#__#____#_#_________#__#____##_#______##_______#___
    _#____###___#_#___##_##___####______##___#____#_##___#___#_#__###_______#_______#__#_#___#__###_#____
    #_#___#_#___#____##_#_#____#___#__###_##___##___#_#_#_##_#_#__#___#__##_#___#__#____#___#_#__#_#_#__#
    #_##____#___#____#___#____#_#________#__#__#_#______#_____#____#_#______#____#___#____#_#____##______
    """

    splitgrid = rawtgrid.strip().split("\n")
    
    examplegrid = []

    for row in splitgrid:
        examplegrid.append(list(row))

    #print(examplegrid)

    start = None
    goal = None
    tie_break = "LARGER_G" #default tie break, could change to SMALLER_G

    for i in range(len(examplegrid)):
        for j in range(len(examplegrid[0])):
            if examplegrid[i][j] == 'A':
                start = (i, j)
            elif examplegrid[i][j] == 'T':
                goal = (i, j)
    
    A_star_output = repeated_forward_a_star(examplegrid, start, goal, tie_break) 
    path = A_star_output[0]
    total_expanded = A_star_output[1]

    print(f"Path ends at: {path[-1]}") #access the last element
    print(f"Goal position: {goal}")

    if path:
        print(f"Repeated Forward A* found a path with {len(path)} nodes expanded.")
        visualize_maze_debug(examplegrid, path, total_expanded)
    else:
        print("Repeated Forward A* could not find a path.")

#test_repeated_forward_astar()

def test_repeated_backward_astar():
    rawtgrid = """
    #__##_###_#_#_#____#_____#____#_________#_###__#___##_#______#_#_#_____##____#______#_#_#______#_#__#
    _#__#____#_______##_______#_______##_________#______#__#____#____#________#____#_#_#___##__##__#___#_
    __#_#___#_#_______##_____#___#____##____________#___#_____#___#_#______#______#_____###__#_##_#_____#
    _#_##__#_#___#___#__##_##_#____________#_##_##__#__#_###_#_#____#_#__#____#__#___#__#_###_#______#__#
    ___##_#__####__#______#__##___#_#_____#_##__#__##_#_#___#_#__#______##_________#__#_________####_##__
    ##__#_________#_______#___#____#__#_##__#_#__###____#___##_##______###_###_#___#___#_#___#___#__#_##_
    ____#___#__#_______#______#_##___#__##___#_##___##______#__#_________#____________#__#_#___#_______#_
    ___##___##_#_#____#_##_#__#__#___##__##__#_#___#___#__##__________#_#_#__#______##___#_________#_____
    _##________###_____#_____#___#_#__#__##__#___#_#______#___##____#______#_#____________#___##____#_#__
    __#___#____###_#_#_____##_#_##___##__#________##_##__##_________#___#_#_##_#_#___##_#____#___#___##_#
    #_________#__#_____##____#________##___#__#_#_##__#___#______#_________#______#_#_####______#________
    #_#____#__________#_________###___##_#____##_______#____#__#__##___#_##__##____#_#_#___##___#______#_
    _#__#____________#___#____#__________#________#####_______###__#_#_#______#_##__#_#_#_____#_#_____#_#
    _____#__#___#_#____###_#__#__##__##_____#______#_____________#_____##____#___#__###_______________#__
    _____#____#_____#__#___#_##________#__#_______#____#______#_#_________#__####_#______#__##__#___#___#
    #_#__#_####_#___#__#___#__##__#_#___#___#_##_#_________#_###________#__#__##__#__#__#_#_#_____#_____#
    _#_#_##____#____#_##_____#__________#_____#####__##___#_____#__##___##_####__#__#__#__#_______#_____#
    __#__#_____#__#__#_____#__#_####_##__##___________#__#____##_#__##_##______#_#_#____#__#_#_________#_
    _##__#_#_#____#__##_##___________#_##_#_#______##______#__#_#__#_#________###________________________
    #_#__#___##_#_#___#__#______###__#_#__#___###_##___#_______#___#_#___#_#_#__#____#__##__##__##___#_##
    ______##__##_###______##___#_##_#_#__##______#_#______##____#__#__#_#____#____##__#_#_###_____#__#_##
    _____#_____##__________##_#_##____#___##______#___#__#_#______###_#___________#________#_#__##__#____
    ##_##___#__#_#__#_###___##____##__#__#_#________#____#______##________#______#__#___#_#_#__#__#____#_
    _________#__________#___#_#__#_#__##____#______#____#_______#______##_____#__##___#___###__#_________
    ____#___##_##__#_____##__##____###___#__##_#_##_#____##__#__#__#_##___#_##_____#___________#__##__#__
    #_###______##__#_###___##_###__#__#___##__#_#___#__##__#__#__#_____#___#_____#__###_____#_________#__
    _#___#____#___#_#_____#_#__#_###_#___#_##_#____#__#__#_#_____#_#____##__________#_##_____#__##___#_#_
    _____#_______#__#___#_##____##_____#_________##___________#___#__##_#_#___###____#_##_#_#_#_###______
    __###_____#_#__#__#_______#____#__#__####___#_#_##__#_____#__#__#__#___#_____#_____##____##____#_____
    _#__#_#__#_#_______#_#_##_##______#_#_#___#__##_#_######__#___#_______#_#________#_________#_#_#_____
    #______#____#________________#__________#_____#________#___#___#_______##__#___##______#_______#__#__
    _#_###___#_##_________###__________#__#___#__#____###__#_#_#__#___#___#_____#__#__#_##_#_#_________#_
    _______#____#_____##___###_###____#_______#__#__#__#_______#__#_#_____#___#___________#__#__#___#____
    ______##______#_______##____#__##_#____#_##____#_##___#___##_#___#__##_________#____#___##_#_##____#_
    ______#______#__#_#__##_#___##_#_#________#__#_#_#_##_#__#____#___#_##________#__#_##_#_#____#_______
    _____##_________#_###___#_#___#__#_______####__#_______##__________________#_##____#__##_______#_###_
    ###__#_#____#__##_##_##_##_#_#_#_#_________###_______#_#___#_##___###____#_#__#_##_____#_____##_#__##
    ____####____#_______#__###___##__#___##____#_#____#___#_###_##_#____##____##_#_____#____#________#_#_
    #__#__#____#_#_#_#____#_____#______#__#_______####______#__##____#_____##______#_###__##__##_________
    _#_________#_____#_#_##__________#__#__#__#_______#___#___#____#__#_#_____#___###______#__#__#____#__
    #_#####____#____###_#_#_#_##___#_##___#___#_#______#______##__#_#___##____##_#_____#__#__##___##__#__
    ___#____#_____##__#___#___#________#___#_#_____#_##_#_##___#_#_#_#_#_#__________#_##_#__#_#_#_##_____
    #_#_###_____________##_#___##_____##___#____#_##_________________#____________#__________##_#________
    ____#_##_##______###_______#_#_#_#___####_______#___##___#_______##________##_##_#_#______#________##
    __#_#_____________#_#___#_____#_______#__#______#___#__###__#___A___#_#__#___#__#_###_##__#_#___###__
    _##_##______#_#____#__##_##___#_###__#______#___#_#_____#_#_______#__#__####_#__#____#_#______#__#___
    _#__#__##_____#__#__###____##____#_#__#_##____#_____#________#_#_#_#________#___#_##_____##_#______#_
    #______####__#_#____#_#______#____#__________#_#___#_#__#_____#_##_#___##_____#___##___#_____________
    _####____#__#________##_##____#_#_##__#__#__#_____#______#______#_#____#__#__##______#_________#_____
    #_#___#__##_#___#_____##__##___#_##__#_#__#__#_#__#____#______##___####_##_#___###_______##____#___#_
    #_#___#_#_#_#____#_#_#_##________#_______________##_#___#_____##___#_##__##_#___#____#___#__#____#___
    #____#_#_#_#_#_#_____##__________#_#________________###_____________#______###_###___##__##______#_##
    __#__#________#_______#_##__#____##_#_#__###__#____##__________#__________##_#____##_______##______#_
    _#__#_____#______#________#_#_#______#___##__________###____#_#_##___#__#___#_______##_______________
    #__#_#__#__#####___#_#___##_#__#_#__#___##__##_#_##_#_####__##__##____#_#__#_#_____#___##___________#
    #_#___#___#__#_#___#_#___#_##___#__#_____##___#_##_#_##____#__#_#____#__#____#_#__###__#_#______#___#
    #__#______#____#____#____##____#_______##_________#_____##____________#___####__##___#________#_#_#__
    #___#__#__###__##_#__##______#____##____##_____#________#____###____#_#__________#_________##______##
    ##_#_______#_##___#____#___######____#________####____#____###__#_#__#____##_#__#_____##______#_#____
    _##_###_#___##_#_#____#____#__#____#__#_#_____#__#____________#____##______###__##____#_______#_#___#
    #_______#_____#_#___#_##____##__#_#___##_#___##_#_________##__#_##__#__###___#______##_####___#_#____
    _____#_____#__#_____#_#________#__#____##_#___#______#___##__#____#__#__#___#____#_##___#####_____##_
    _##_______##_#______________#_#__#_###__#__##__#________##__#_____________#_______#_#________#_#___#_
    ______#____###__#_____#____##_##_#__#_____#____#____#_#___#____#__#__________#_#__##___#________##__#
    ______________##____#__#_#__##_____________________#___##_____#____#_#_______#_#_#______#____#____#__
    _#_#_____#____#__#_____##_##_____#___##___###_##____#_#__#____####_#________#_#_#___##___#_#____#____
    _#_____#####_#____####__#______#_##____#__##_______#_#__#_##__##______#_#__#___##______#_##_##___#___
    ______#_#___#_#_#_#_#__#____#____#_#_#_________#_#___##_____#______#____###__#_________##__##_____##_
    ______#__##______#_#_#__#______##_#_#_##__##__##__#_______#_____________________##__#_#__#__#____#__#
    _____##___#_#______#____#__##_#____#_#_____#_##_#_#____#_#____###__#________#_###__#_#__###_#__#_##__
    #_____##_#__###___#_________#__#______#____#__#____##______#___###____#__#____####_#___##_##___#_____
    ____#_#_#___#_#_#___#_##_##_#___####_#_#_______#_#__________#____#_#_#___#___________#_____###______#
    _#___##_#__#__#_#_______#_#___#____##_#__#____##___####____________##_#_#____#__#___#__#___#__#____#_
    #_#___#_##_#____##___###____###______#___##____#_#__#____#_______##_##___#_____#_##_____##__#____##__
    ______#_#_#_#____#_#____#_##____#_________#_#__##__#_#####____##_______###__#_#____##____#_#__##____#
    _____#__#___###_#________T#___#___________##_#__________#__##___###__#_#__###_#___#__#_#___#__#__#___
    __________________#___#__#_____#_##__#____#______##_______#____#_#___#__________#__##________###___#_
    ______##__#____#_#____##___#____##_#______#_#_##_#____##_#__###_#___#__#____#___#__#___#_#__##_______
    #_##_#____________#__#_______#_____#_#_##__#__#_###___##__#_##_#__##___###__#____##______#___##_##___
    _______#______#_#_#______#_##_##________#__#___##__________#___#_#_###_#__#__#_#____#___#__##__#_____
    _##_#________#_______#_#___##___#_____#__##_#_#______#___##__#_#_____________#__#_____#__##___#__#___
    ##__#_____###__#_##___________##__#__#_____#_______________#__##___#_____###_#___##_#_##__#____###_#_
    _____#___##____##_____###____#_#__#___#__________##__##___#___#_##_#__#_______#_#________#___#_______
    _#___##___#_____________#_#__#______#______#_#_______________##___#____#___#_#______#_##___#____#_#_#
    __####_#_#___######_#_#_____#_#_#_#___#_#__###__#_##______#____###_#______#_#___#__#__##_#__##___#_#_
    __##__##_____#____#___###______#_#_##_#__##____#________#_____#___#____###______#_#______#___##_#_#_#
    _#_________#________#_____#___#__#_#__##__#_####___#_##_#_#_##_#_#___#______#____##____###_#_____#___
    _##___#___#_#_#_#_##___#_#__________###_#_##_________#_#__#__#_#______##___##_____#______#__#______##
    _#_______#_##_##_____#___##____##___#_##___#__#_######_________#__#__#_#_#_________________#_#_____#_
    #_________#__#_#_##___#__###_____#______#_________##_______#___#____##_#____#________#___#__##_#_#___
    #_#____#____#___##____##_#_#_#####______##_#_#____#_#____#_#__#___#___##__###___##___#__##___________
    ##______#_____#_#_#___#_____###__#_________#_##_#_____##________#_#_##___#__#___#___#______#____#_#__
    ______#_#___#_____#_____#_#___#____#___###_#___#_#_____#__#___###________#__###____#__#_#_____##_____
    _#_##___#__##_#_#____#_#__#______#_#_________#__#___##__#__#___#__##__#____#_______#____#_##_#__#____
    ______________##______#_______####_#__####_#_####___##_##_#_#______#___##__#__#___________#_#____###_
    ###_____#______#_#_____#__###__#_####_#______#__##_____#_#___________##__________#_____##____________
    ____#___##_#____#__#_______#____##______#____#_####_____#___#____#__________#_#____#__#______#__##___
    _#___#___#__#____#_#_#___#__##_______________##___#__#____#_#_________#__#____##_#______##_______#___
    _#____###___#_#___##_##___####______##___#____#_##___#___#_#__###_______#_______#__#_#___#__###_#____
    #_#___#_#___#____##_#_#____#___#__###_##___##___#_#_#_##_#_#__#___#__##_#___#__#____#___#_#__#_#_#__#
    #_##____#___#____#___#____#_#________#__#__#_#______#_____#____#_#______#____#___#____#_#____##______
    """

    splitgrid = rawtgrid.strip().split("\n")
    
    examplegrid = []

    for row in splitgrid:
        examplegrid.append(list(row))

    #print(examplegrid)

    start = None
    goal = None
    tie_break = "LARGER_G" #default tie break, could change to SMALLER_G

    for i in range(len(examplegrid)):
        for j in range(len(examplegrid[0])):
            if examplegrid[i][j] == 'A':
                start = (i, j)
            elif examplegrid[i][j] == 'T':
                goal = (i, j)
    
    A_star_output = repeated_backward_a_star(examplegrid, start, goal, tie_break) 
    path = A_star_output[0]
    total_expanded = A_star_output[1]

    print(f"Path ends at: {path[-1]}") #access the last element
    print(f"Goal position: {goal}")

    if path:
        print(f"Repeated Backward A* found a path with {len(path)} nodes expanded.")
        visualize_maze_debug(examplegrid, path, total_expanded)
    else:
        print("Repeated Backward A* could not find a path.")

#test_repeated_backward_astar()

def test_adaptive_astar():
    rawtgrid = """
    #__##_###_#_#_#____#_____#____#_________#_###__#___##_#______#_#_#_____##____#______#_#_#______#_#__#
    _#__#____#_______##_______#_______##_________#______#__#____#____#________#____#_#_#___##__##__#___#_
    __#_#___#_#_______##_____#___#____##____________#___#_____#___#_#______#______#_____###__#_##_#_____#
    _#_##__#_#___#___#__##_##_#____________#_##_##__#__#_###_#_#____#_#__#____#__#___#__#_###_#______#__#
    ___##_#__####__#______#__##___#_#_____#_##__#__##_#_#___#_#__#______##_________#__#_________####_##__
    ##__#_________#_______#___#____#__#_##__#_#__###____#___##_##______###_###_#___#___#_#___#___#__#_##_
    ____#___#__#_______#______#_##___#__##___#_##___##______#__#_________#____________#__#_#___#_______#_
    ___##___##_#_#____#_##_#__#__#___##__##__#_#___#___#__##__________#_#_#__#______##___#_________#_____
    _##________###_____#_____#___#_#__#__##__#___#_#______#___##____#______#_#____________#___##____#_#__
    __#___#____###_#_#_____##_#_##___##__#________##_##__##_________#___#_#_##_#_#___##_#____#___#___##_#
    #_________#__#_____##____#________##___#__#_#_##__#___#______#_________#______#_#_####______#________
    #_#____#__________#_________###___##_#____##_______#____#__#__##___#_##__##____#_#_#___##___#______#_
    _#__#____________#___#____#__________#________#####_______###__#_#_#______#_##__#_#_#_____#_#_____#_#
    _____#__#___#_#____###_#__#__##__##_____#______#_____________#_____##____#___#__###_______________#__
    _____#____#_____#__#___#_##________#__#_______#____#______#_#_________#__####_#______#__##__#___#___#
    #_#__#_####_#___#__#___#__##__#_#___#___#_##_#_________#_###________#__#__##__#__#__#_#_#_____#_____#
    _#_#_##____#____#_##_____#__________#_____#####__##___#_____#__##___##_####__#__#__#__#_______#_____#
    __#__#_____#__#__#_____#__#_####_##__##___________#__#____##_#__##_##______#_#_#____#__#_#_________#_
    _##__#_#_#____#__##_##___________#_##_#_#______##______#__#_#__#_#________###________________________
    #_#__#___##_#_#___#__#______###__#_#__#___###_##___#_______#___#_#___#_#_#__#____#__##__##__##___#_##
    ______##__##_###______##___#_##_#_#__##______#_#______##____#__#__#_#____#____##__#_#_###_____#__#_##
    _____#_____##__________##_#_##____#___##______#___#__#_#______###_#___________#________#_#__##__#____
    ##_##___#__#_#__#_###___##____##__#__#_#________#____#______##________#______#__#___#_#_#__#__#____#_
    _________#__________#___#_#__#_#__##____#______#____#_______#______##_____#__##___#___###__#_________
    ____#___##_##__#_____##__##____###___#__##_#_##_#____##__#__#__#_##___#_##_____#___________#__##__#__
    #_###______##__#_###___##_###__#__#___##__#_#___#__##__#__#__#_____#___#_____#__###_____#_________#__
    _#___#____#___#_#_____#_#__#_###_#___#_##_#____#__#__#_#_____#_#____##__________#_##_____#__##___#_#_
    _____#_______#__#___#_##____##_____#_________##___________#___#__##_#_#___###____#_##_#_#_#_###______
    __###_____#_#__#__#_______#____#__#__####___#_#_##__#_____#__#__#__#___#_____#_____##____##____#_____
    _#__#_#__#_#_______#_#_##_##______#_#_#___#__##_#_######__#___#_______#_#________#_________#_#_#_____
    #______#____#________________#__________#_____#________#___#___#_______##__#___##______#_______#__#__
    _#_###___#_##_________###__________#__#___#__#____###__#_#_#__#___#___#_____#__#__#_##_#_#_________#_
    _______#____#_____##___###_###____#_______#__#__#__#_______#__#_#_____#___#___________#__#__#___#____
    ______##______#_______##____#__##_#____#_##____#_##___#___##_#___#__##_________#____#___##_#_##____#_
    ______#______#__#_#__##_#___##_#_#________#__#_#_#_##_#__#____#___#_##________#__#_##_#_#____#_______
    _____##_________#_###___#_#___#__#_______####__#_______##__________________#_##____#__##_______#_###_
    ###__#_#____#__##_##_##_##_#_#_#_#_________###_______#_#___#_##___###____#_#__#_##_____#_____##_#__##
    ____####____#_______#__###___##__#___##____#_#____#___#_###_##_#____##____##_#_____#____#________#_#_
    #__#__#____#_#_#_#____#_____#______#__#_______####______#__##____#_____##______#_###__##__##_________
    _#_________#_____#_#_##__________#__#__#__#_______#___#___#____#__#_#_____#___###______#__#__#____#__
    #_#####____#____###_#_#_#_##___#_##___#___#_#______#______##__#_#___##____##_#_____#__#__##___##__#__
    ___#____#_____##__#___#___#________#___#_#_____#_##_#_##___#_#_#_#_#_#__________#_##_#__#_#_#_##_____
    #_#_###_____________##_#___##_____##___#____#_##_________________#____________#__________##_#________
    ____#_##_##______###_______#_#_#_#___####_______#___##___#_______##________##_##_#_#______#________##
    __#_#_____________#_#___#_____#_______#__#______#___#__###__#___A___#_#__#___#__#_###_##__#_#___###__
    _##_##______#_#____#__##_##___#_###__#______#___#_#_____#_#_______#__#__####_#__#____#_#______#__#___
    _#__#__##_____#__#__###____##____#_#__#_##____#_____#________#_#_#_#________#___#_##_____##_#______#_
    #______####__#_#____#_#______#____#__________#_#___#_#__#_____#_##_#___##_____#___##___#_____________
    _####____#__#________##_##____#_#_##__#__#__#_____#______#______#_#____#__#__##______#_________#_____
    #_#___#__##_#___#_____##__##___#_##__#_#__#__#_#__#____#______##___####_##_#___###_______##____#___#_
    #_#___#_#_#_#____#_#_#_##________#_______________##_#___#_____##___#_##__##_#___#____#___#__#____#___
    #____#_#_#_#_#_#_____##__________#_#________________###_____________#______###_###___##__##______#_##
    __#__#________#_______#_##__#____##_#_#__###__#____##__________#__________##_#____##_______##______#_
    _#__#_____#______#________#_#_#______#___##__________###____#_#_##___#__#___#_______##_______________
    #__#_#__#__#####___#_#___##_#__#_#__#___##__##_#_##_#_####__##__##____#_#__#_#_____#___##___________#
    #_#___#___#__#_#___#_#___#_##___#__#_____##___#_##_#_##____#__#_#____#__#____#_#__###__#_#______#___#
    #__#______#____#____#____##____#_______##_________#_____##____________#___####__##___#________#_#_#__
    #___#__#__###__##_#__##______#____##____##_____#________#____###____#_#__________#_________##______##
    ##_#_______#_##___#____#___######____#________####____#____###__#_#__#____##_#__#_____##______#_#____
    _##_###_#___##_#_#____#____#__#____#__#_#_____#__#____________#____##______###__##____#_______#_#___#
    #_______#_____#_#___#_##____##__#_#___##_#___##_#_________##__#_##__#__###___#______##_####___#_#____
    _____#_____#__#_____#_#________#__#____##_#___#______#___##__#____#__#__#___#____#_##___#####_____##_
    _##_______##_#______________#_#__#_###__#__##__#________##__#_____________#_______#_#________#_#___#_
    ______#____###__#_____#____##_##_#__#_____#____#____#_#___#____#__#__________#_#__##___#________##__#
    ______________##____#__#_#__##_____________________#___##_____#____#_#_______#_#_#______#____#____#__
    _#_#_____#____#__#_____##_##_____#___##___###_##____#_#__#____####_#________#_#_#___##___#_#____#____
    _#_____#####_#____####__#______#_##____#__##_______#_#__#_##__##______#_#__#___##______#_##_##___#___
    ______#_#___#_#_#_#_#__#____#____#_#_#_________#_#___##_____#______#____###__#_________##__##_____##_
    ______#__##______#_#_#__#______##_#_#_##__##__##__#_______#_____________________##__#_#__#__#____#__#
    _____##___#_#______#____#__##_#____#_#_____#_##_#_#____#_#____###__#________#_###__#_#__###_#__#_##__
    #_____##_#__###___#_________#__#______#____#__#____##______#___###____#__#____####_#___##_##___#_____
    ____#_#_#___#_#_#___#_##_##_#___####_#_#_______#_#__________#____#_#_#___#___________#_____###______#
    _#___##_#__#__#_#_______#_#___#____##_#__#____##___####____________##_#_#____#__#___#__#___#__#____#_
    #_#___#_##_#____##___###____###______#___##____#_#__#____#_______##_##___#_____#_##_____##__#____##__
    ______#_#_#_#____#_#____#_##____#_________#_#__##__#_#####____##_______###__#_#____##____#_#__##____#
    _____#__#___###_#________T#___#___________##_#__________#__##___###__#_#__###_#___#__#_#___#__#__#___
    __________________#___#__#_____#_##__#____#______##_______#____#_#___#__________#__##________###___#_
    ______##__#____#_#____##___#____##_#______#_#_##_#____##_#__###_#___#__#____#___#__#___#_#__##_______
    #_##_#____________#__#_______#_____#_#_##__#__#_###___##__#_##_#__##___###__#____##______#___##_##___
    _______#______#_#_#______#_##_##________#__#___##__________#___#_#_###_#__#__#_#____#___#__##__#_____
    _##_#________#_______#_#___##___#_____#__##_#_#______#___##__#_#_____________#__#_____#__##___#__#___
    ##__#_____###__#_##___________##__#__#_____#_______________#__##___#_____###_#___##_#_##__#____###_#_
    _____#___##____##_____###____#_#__#___#__________##__##___#___#_##_#__#_______#_#________#___#_______
    _#___##___#_____________#_#__#______#______#_#_______________##___#____#___#_#______#_##___#____#_#_#
    __####_#_#___######_#_#_____#_#_#_#___#_#__###__#_##______#____###_#______#_#___#__#__##_#__##___#_#_
    __##__##_____#____#___###______#_#_##_#__##____#________#_____#___#____###______#_#______#___##_#_#_#
    _#_________#________#_____#___#__#_#__##__#_####___#_##_#_#_##_#_#___#______#____##____###_#_____#___
    _##___#___#_#_#_#_##___#_#__________###_#_##_________#_#__#__#_#______##___##_____#______#__#______##
    _#_______#_##_##_____#___##____##___#_##___#__#_######_________#__#__#_#_#_________________#_#_____#_
    #_________#__#_#_##___#__###_____#______#_________##_______#___#____##_#____#________#___#__##_#_#___
    #_#____#____#___##____##_#_#_#####______##_#_#____#_#____#_#__#___#___##__###___##___#__##___________
    ##______#_____#_#_#___#_____###__#_________#_##_#_____##________#_#_##___#__#___#___#______#____#_#__
    ______#_#___#_____#_____#_#___#____#___###_#___#_#_____#__#___###________#__###____#__#_#_____##_____
    _#_##___#__##_#_#____#_#__#______#_#_________#__#___##__#__#___#__##__#____#_______#____#_##_#__#____
    ______________##______#_______####_#__####_#_####___##_##_#_#______#___##__#__#___________#_#____###_
    ###_____#______#_#_____#__###__#_####_#______#__##_____#_#___________##__________#_____##____________
    ____#___##_#____#__#_______#____##______#____#_####_____#___#____#__________#_#____#__#______#__##___
    _#___#___#__#____#_#_#___#__##_______________##___#__#____#_#_________#__#____##_#______##_______#___
    _#____###___#_#___##_##___####______##___#____#_##___#___#_#__###_______#_______#__#_#___#__###_#____
    #_#___#_#___#____##_#_#____#___#__###_##___##___#_#_#_##_#_#__#___#__##_#___#__#____#___#_#__#_#_#__#
    #_##____#___#____#___#____#_#________#__#__#_#______#_____#____#_#______#____#___#____#_#____##______
    """

    splitgrid = rawtgrid.strip().split("\n")
    
    examplegrid = []

    for row in splitgrid:
        examplegrid.append(list(row))

    #print(examplegrid)

    start = None
    goal = None
    tie_break = "LARGER_G" #default tie break, could change to SMALLER_G

    for i in range(len(examplegrid)):
        for j in range(len(examplegrid[0])):
            if examplegrid[i][j] == 'A':
                start = (i, j)
            elif examplegrid[i][j] == 'T':
                goal = (i, j)
    
    A_star_output = adaptive_a_star(examplegrid, start, goal, tie_break) 
    path = A_star_output[0]
    total_expanded = A_star_output[1]

    print(f"Path ends at: {path[-1]}") #access the last element
    print(f"Goal position: {goal}")

    if path:
        print(f"Repeated Backward A* found a path with {len(path)} nodes expanded.")
        visualize_maze_debug(examplegrid, path, total_expanded)
    else:
        print("Repeated Backward A* could not find a path.")

test_adaptive_astar()
    